rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es administrador
    function isAdmin() {
      return isAuthenticated() && 
             resource.data.role == 'admin' ||
             request.auth.token.role == 'admin';
    }
    
    // Función para verificar si el usuario es coordinador o admin
    function isCoordinatorOrAdmin() {
      return isAuthenticated() && 
             (request.auth.token.role == 'admin' || 
              request.auth.token.role == 'coordinator');
    }
    
    // Función para verificar si es el propio usuario
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Reglas para usuarios
    match /users/{userId} {
      // Lectura: usuarios pueden ver su propio perfil, admin/coordinador pueden ver todos
      allow read: if isOwner(userId) || isCoordinatorOrAdmin();
      
      // Escritura: solo admin/coordinador pueden crear/modificar usuarios
      // Los usuarios pueden actualizar ciertos campos de su propio perfil
      allow write: if isCoordinatorOrAdmin() || 
                      (isOwner(userId) && 
                       onlyUpdatingAllowedFields());
      
      // Eliminar: solo administradores
      allow delete: if isAdmin();
    }
    
    // Función para verificar que solo se actualizan campos permitidos
    function onlyUpdatingAllowedFields() {
      let allowedFields = ['displayName', 'profile', 'updatedAt'];
      return request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(allowedFields);
    }

    // Reglas para invitaciones
    match /invitations/{inviteId} {
      allow read, write: if isCoordinatorOrAdmin();
      allow delete: if isAdmin();
    }

    // Reglas para cursos
    match /courses/{courseId} {
      // Lectura: todos los usuarios autenticados pueden ver cursos
      allow read: if isAuthenticated();
      
      // Escritura: solo admin/coordinador/profesor pueden modificar cursos
      allow write: if isCoordinatorOrAdmin() || 
                      request.auth.token.role == 'professor';
      
      // Eliminar: solo administradores
      allow delete: if isAdmin();
    }

    // Reglas para inscripciones
    match /inscriptions/{inscriptionId} {
      // Lectura: usuarios pueden ver sus propias inscripciones, admin/coordinador todas
      allow read: if isOwner(resource.data.userId) || isCoordinatorOrAdmin();
      
      // Escritura: usuarios pueden crear sus inscripciones, admin/coordinador todas
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == request.auth.uid || 
                        isCoordinatorOrAdmin());
      
      // Actualizar: solo admin/coordinador
      allow update: if isCoordinatorOrAdmin();
      
      // Eliminar: solo administradores
      allow delete: if isAdmin();
    }

    // Reglas para configuración del sistema
    match /config/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Reglas para logs y auditoría
    match /logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Los logs no se pueden modificar
    }

    // Reglas temporales para desarrollo
    match /{document=**} {
      // Permitir acceso para desarrollo - CAMBIAR EN PRODUCCIÓN
      allow read, write: if true;
    }
  }
}